def moduleConfigProps = new Properties()
File moduleConfig = project.file("moduleConfig.properties")
if (moduleConfig.exists()) {
    moduleConfigProps.load(new FileInputStream(moduleConfig))
}

apply plugin: 'maven'

ext {
    DIST_PATH = gradle.ext.localMavenDir
    PUBLISH_GROUP_ID = moduleConfigProps.PUBLISH_GROUP_ID
    PUBLISH_ARTIFACT_ID = moduleConfigProps.PUBLISH_ARTIFACT_ID
    PUBLISH_VERSION = moduleConfigProps.PUBLISH_VERSION
}

// custom tasks for creating source/javadoc jars
//task javadoc(type: Javadoc) {
//    source = android.sourceSets.main.java.srcDirs
//    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
//    destinationDir = file("../javadoc/")
//    failOnError false
//}

//task javadocJar(type: Jar, dependsOn: javadoc) {
//    classifier = 'javadoc'
//    from javadoc.destinationDir
//}

//Creating sources with comments
task androidSourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.srcDirs
}

//Put the androidSources and javadoc to t he artifacts
artifacts {
    archives androidSourcesJar
//    archives javadocJar
}

uploadArchives {
    repositories.mavenDeployer {
        def deployPath = file(project.DIST_PATH)
        repository(url: "file://${deployPath.absolutePath}")
        pom.project {
            groupId project.PUBLISH_GROUP_ID
            artifactId project.PUBLISH_ARTIFACT_ID
            version project.PUBLISH_VERSION
        }
    }
}

task autoUploadArchives(dependsOn: ["${project.path}:assembleRelease"]) {
    group = "upload"
    finalizedBy tasks.getByName("uploadArchives")
}